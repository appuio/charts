{{- if and (or .Release.IsInstall .Values.stardog.users) .Values.replicaCount }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "stardog.fullname" . }}-postinstall
  labels:
    app.kubernetes.io/name: {{ include "stardog.name" $ }}
    app.kubernetes.io/component: config
    helm.sh/chart: {{ include "stardog.chart" $ }}
    app.kubernetes.io/instance: {{ $.Release.Name }}
    app.kubernetes.io/managed-by: {{ $.Release.Service }}
  annotations:
    # This is what defines this resource as a hook. Without this line, the
    # job is considered part of the release.
    "helm.sh/hook": post-upgrade,post-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  backoffLimit: 2
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "stardog.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      restartPolicy: Never
      imagePullSecrets:
      {{- if .Values.image.existingPullSecret }}
        - name: {{ .Values.image.existingPullSecret }}
      {{- else }}
        - name: {{ template "stardog.fullname" . }}-pullsecret
      {{- end }}
      containers:
      - name: postinstall
        image: {{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: STARDOG_JAVA_ARGS
          value: -Dstardog.default.cli.server=http://{{ include "stardog.fullname" . }}:5820 -XX:ParallelGCThreads=1
        - name: STARDOG_ADMIN_PW
          valueFrom:
            secretKeyRef:
              name: {{ include "stardog.fullname" . }}-user-passwords
              key: admin
        - name: STARDOG_SERVER_URL
          value: http://{{ include "stardog.fullname" $ }}:5820
        command:
        - /bin/bash
        - -ce
        - |
          script="/var/opt/stardog/stardog-wrapper.sh"
          echo "Testing stardog connectivity to ${STARDOG_SERVER_URL}..."
          until $(curl -o /dev/null -s -f "${STARDOG_SERVER_URL}/admin/alive"); do sleep 1; done
          echo "Stardog is available now"

          {{ if .Release.IsInstall -}}
          bash ${script} -v --set-admin-password
          {{- end }}
          {{- range .Values.stardog.disabledUsers }}
          bash ${script} -v --disable-user {{ . }}
          {{- end }}
          {{- range .Values.stardog.databases }}
          bash ${script} -v --new-database {{ .name }} {{ if .options }}-- -o {{ range .options }}"{{ .name }}={{ .value }}" {{ end }}--{{ end }}
          {{- end }}
          {{- range .Values.stardog.users }}
          bash ${script} -v --ensure-user {{ .name }} --user-pass-from "/run/secrets/stardog/{{ .name }}"
          {{- end }}
          {{- range .Values.stardog.roles }}
          bash ${script} -v --ensure-role {{ .name }}
          {{- $rolename := .name }}
          {{- range .grants }}
          bash ${script} -v --ensure-role-grants {{ $rolename }},{{ .action }},{{ .object }}
          {{- end }}
          {{- range .users }}
          bash ${script} -v --assign-role-to-user {{ $rolename }},{{ . }}
          {{- end }}
          {{- end }}

        volumeMounts:
        - name: users
          mountPath: /run/secrets/stardog
          readOnly: true
        - name: config
          mountPath: /var/opt/stardog/stardog-wrapper.sh
          subPath: stardog-wrapper.sh
      volumes:
      - name: users
        secret:
          secretName: {{ include "stardog.fullname" . }}-user-passwords
      - name: config
        configMap:
          name: {{ template "stardog.fullname" . }}-config
{{- end }}
